-- Conecte-se ao banco M3Gestor antes de rodar

-- Tabela: clientes
CREATE TABLE IF NOT EXISTS public.clientes (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome            VARCHAR(255) NOT NULL,
    endereco        VARCHAR(255),
    telefone        VARCHAR(50),
    email           VARCHAR(255),
    documento       VARCHAR(100),
    data_cadastro   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    ativo           BOOLEAN DEFAULT TRUE
);

-- Índices para a tabela clientes
CREATE INDEX IF NOT EXISTS idx_clientes_nome ON public.clientes (nome);
CREATE INDEX IF NOT EXISTS idx_clientes_documento ON public.clientes (documento);
CREATE INDEX IF NOT EXISTS idx_clientes_ativo ON public.clientes (ativo);

-- Tabela: usuarios
CREATE TABLE IF NOT EXISTS public.usuarios (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome            VARCHAR(255) NOT NULL,
    email           VARCHAR(255) NOT NULL UNIQUE,
    senha           VARCHAR(255) NOT NULL,
    admin           BOOLEAN DEFAULT FALSE,
    ativo           BOOLEAN DEFAULT TRUE,
    data_cadastro   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    ultimo_acesso   TIMESTAMP WITH TIME ZONE
);

-- Tabela: quotes (orçamentos)
CREATE TABLE IF NOT EXISTS public.quotes (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name            VARCHAR(255) NOT NULL,
    client_id       INTEGER REFERENCES public.clientes(id) ON UPDATE CASCADE ON DELETE SET NULL,
    client_name     VARCHAR(255),
    date            DATE NOT NULL,
    shipping_value  DOUBLE PRECISION NOT NULL DEFAULT 0,
    total_value     DOUBLE PRECISION NOT NULL DEFAULT 0,
    discount        DOUBLE PRECISION NOT NULL DEFAULT 0 CHECK (discount >= 0 AND discount <= 100),
    complemento     TEXT,
    status          VARCHAR(50) DEFAULT 'RASCUNHO', -- RASCUNHO, ENVIADO, APROVADO, CANCELADO
    created_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by      INTEGER REFERENCES public.usuarios(id) ON DELETE SET NULL,
    updated_by      INTEGER REFERENCES public.usuarios(id) ON DELETE SET NULL
);

-- Índices para a tabela quotes
CREATE INDEX IF NOT EXISTS idx_quotes_name ON public.quotes (name);
CREATE INDEX IF NOT EXISTS idx_quotes_date_id ON public.quotes (date DESC, id DESC);
CREATE INDEX IF NOT EXISTS idx_quotes_client_id ON public.quotes (client_id);
CREATE INDEX IF NOT EXISTS idx_quotes_status ON public.quotes (status);

-- Tabela: quote_items (itens do orçamento)
CREATE TABLE IF NOT EXISTS public.quote_items (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quote_id    INTEGER NOT NULL REFERENCES public.quotes(id) ON UPDATE CASCADE ON DELETE CASCADE,
    code        VARCHAR(50) DEFAULT '',
    description TEXT,
    quantity    INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
    width       DOUBLE PRECISION NOT NULL DEFAULT 0 CHECK (width >= 0),
    height      DOUBLE PRECISION NOT NULL DEFAULT 0 CHECK (height >= 0),
    length      DOUBLE PRECISION NOT NULL DEFAULT 0 CHECK (length >= 0),
    unit_value  DOUBLE PRECISION NOT NULL DEFAULT 0 CHECK (unit_value >= 0),
    total       DOUBLE PRECISION NOT NULL DEFAULT 0 CHECK (total >= 0),
    created_at  TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Índices para a tabela quote_items
CREATE INDEX IF NOT EXISTS idx_quote_items_quote_id ON public.quote_items (quote_id);
CREATE INDEX IF NOT EXISTS idx_quote_items_code ON public.quote_items (code);

-- Tabela: produtos
CREATE TABLE IF NOT EXISTS public.produtos (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo          VARCHAR(50) NOT NULL UNIQUE,
    descricao       VARCHAR(255) NOT NULL,
    unidade_medida  VARCHAR(10) DEFAULT 'UN',
    preco_unitario  DOUBLE PRECISION NOT NULL DEFAULT 0,
    custo           DOUBLE PRECISION NOT NULL DEFAULT 0,
    estoque_atual   DOUBLE PRECISION NOT NULL DEFAULT 0,
    estoque_minimo  DOUBLE PRECISION NOT NULL DEFAULT 0,
    ativo           BOOLEAN DEFAULT TRUE,
    observacoes     TEXT,
    created_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Índices para a tabela produtos
CREATE INDEX IF NOT EXISTS idx_produtos_codigo ON public.produtos (codigo);
CREATE INDEX IF NOT EXISTS idx_produtos_descricao ON public.produtos (descricao);

-- Tabela: movimentacoes_estoque
CREATE TABLE IF NOT EXISTS public.movimentacoes_estoque (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    produto_id      INTEGER NOT NULL REFERENCES public.produtos(id) ON DELETE CASCADE,
    tipo            VARCHAR(2) NOT NULL, -- EN (entrada), SA (saída), AJ (ajuste)
    quantidade      DOUBLE PRECISION NOT NULL,
    valor_unitario  DOUBLE PRECISION NOT NULL,
    documento       VARCHAR(100),
    observacao      TEXT,
    created_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by      INTEGER REFERENCES public.usuarios(id) ON DELETE SET NULL
);

-- Índices para a tabela movimentacoes_estoque
CREATE INDEX IF NOT EXISTS idx_mov_estoque_produto ON public.movimentacoes_estoque (produto_id);
CREATE INDEX IF NOT EXISTS idx_mov_estoque_data ON public.movimentacoes_estoque (created_at);

-- Tabela: logs
CREATE TABLE IF NOT EXISTS public.logs (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id      INTEGER REFERENCES public.usuarios(id) ON DELETE SET NULL,
    acao            VARCHAR(50) NOT NULL,
    descricao       TEXT,
    tabela          VARCHAR(50),
    registro_id     INTEGER,
    dados_antigos   JSONB,
    dados_novos     JSONB,
    ip_address      VARCHAR(45),
    user_agent      TEXT,
    created_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Índices para a tabela logs
CREATE INDEX IF NOT EXISTS idx_logs_created_at ON public.logs (created_at);
CREATE INDEX IF NOT EXISTS idx_logs_usuario_id ON public.logs (usuario_id);
CREATE INDEX IF NOT EXISTS idx_logs_acao ON public.logs (acao);

-- Função para atualizar o campo updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para atualizar automaticamente o campo updated_at
CREATE TRIGGER update_quotes_updated_at
BEFORE UPDATE ON public.quotes
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_quote_items_updated_at
BEFORE UPDATE ON public.quote_items
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_produtos_updated_at
BEFORE UPDATE ON public.produtos
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Inserir usuário admin padrão (senha: admin123)
INSERT INTO public.usuarios (nome, email, senha, admin, ativo)
SELECT 'Administrador', 'admin@m3gestor.com', '$2a$10$8Xov8wH9TQ2Q8XJ5Z8XZQO8XZQO8XZQO8XZQO8XZQO8XZQO8XZQO', TRUE, TRUE
WHERE NOT EXISTS (SELECT 1 FROM public.usuarios WHERE email = 'admin@m3gestor.com');